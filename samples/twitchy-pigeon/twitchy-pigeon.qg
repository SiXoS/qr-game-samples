
const OBSTACLE_WIDTH = 150
const HALF_OBSTACLE_WIDTH = OBSTACLE_WIDTH/2
const HOLE_SIZE = 300

init {
	bird = createCompositeShape(300, 500, arrayList(
		createEllipse(0, 0, 60, 40),
		createEllipse(17, -8, 6, 6).setColorBackground(),
		createTriangle(36, 0, 20, 30).setRotationDeg(-90),
		createTriangle(-36, -5, 10, 20).setRotationDeg(93),
		createTriangle(-36, 5, 10, 20).setRotationDeg(87)))
	bird.setAccelerationPerSecondY(1500)
	obstacleTimer = 0
	obstacleTimeout = 240
	obstacleShapes = linkedList(:obstacle)
}

run {
	if (obstacleTimer++ > obstacleTimeout) {
		obstacleTimer = 0
		obstacleShapes.append(createObstacle())
	}
	bird.setRotationDeg(-radToDeg(aTan(bird.getSpeedPerSecondY()/600)))

	if (bird.getPosY() > 985 || bird.getPosY() < 15) {
		lost(true)
	}

	leftMostObstacle = obstacleShapes.peek()
	if (leftMostObstacle != null: obstacle) {

		obstaclePosX = leftMostObstacle.upper.getPosX()
		if (obstaclePosX - HALF_OBSTACLE_WIDTH < bird.getPosX() && obstaclePosX + HALF_OBSTACLE_WIDTH > bird.getPosX() && (bird.getPosY() < leftMostObstacle.holeYpos + 15 || bird.getPosY() > leftMostObstacle.holeYpos+285)) {
			lost(true)
		}

		if (obstaclePosX < -OBSTACLE_WIDTH) {
			obstacleShapes.pop()
			modifyScore(1)
		}
	}

	draw(bird)
	for (obstacle in obstacleShapes) {
		draw(obstacle.upper)
		draw(obstacle.lower)
	}
}

input(button, pressedElseReleased) {
	if (pressedElseReleased) {
		bird.setSpeedPerSecondY(-800)
	}
}

fun createObstacle(): obstacle {
	yPos = rand(100, 900 - HOLE_SIZE)
	return new obstacle(
		createPart(0, yPos),
		createPart(yPos + HOLE_SIZE, 1000 - (yPos + HOLE_SIZE)),
		yPos)
}

fun createPart(yPos: number, height: number): Shape {
	return createRectangle(1200, yPos + height/2, OBSTACLE_WIDTH, height)
			.setSpeedPerSecondX(-250)
}

struct obstacle {
	upper: Shape
	lower: Shape
	holeYpos: number
}